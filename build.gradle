plugins {
    // Base
    id 'java'

    // Coverage reporting
    id 'jacoco'

    // Publishing
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

ext {
    groupId = 'org.saltyrtc'
    libraryVersion = '1.0.1'
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Test dependencies
    testCompile 'junit:junit:4.12'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        ChunkedDC(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            groupId = project.ext.groupId
            artifactId = project.name
            version = project.ext.libraryVersion

            pom {
                name = 'ChunkedDC'
                description = 'Binary Chunking for WebRTC DataChannels (and other use cases)'
                url = 'https://github.com/saltyrtc/chunked-dc'

                scm {
                    url = 'https://github.com/saltyrtc/chunked-dc.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'LICENSE-APACHE'
                    }
                    license {
                        name = 'The MIT License'
                        url = 'LICENSE-MIT'
                    }
                }

                developers {
                    developer {
                        id = 'db'
                        name = 'Danilo Bargen'
                        email = 'danilo.bargen@threema.ch'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    useGpgCmd() // Use gpg-agent. For config options, see `gradle.properties`.
    sign publishing.publications.ChunkedDC
}
